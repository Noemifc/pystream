Metadata-Version: 2.4
Name: pystream
Version: 1.0.0
Summary: Real-time NTNDArray viewer with plugin pipeline.
Author-email: Alberto Mittone <amittone@anl.gov>
License: MIT
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: numpy>=1.21
Requires-Dist: matplotlib>=3.5
Requires-Dist: pvapy>=5.6.0
Requires-Dist: tkinterdnd2; platform_system == "Windows"
Provides-Extra: dev
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"

# NTNDArray Real-time Viewer (Dark UI, Flat-field, Plugin Pipeline)

This application displays 2D images streamed from EPICS PVAccess `NTNDArray` PVs in real time.
It provides a dark graphical interface, flat-field normalization, contrast control, and a flexible plugin
system for custom processing pipelines defined in JSON configuration files.

## Features

- Real-time 2D image display from `NTNDArray` PVs
- Grayscale conversion (RGB â†’ luminance)
- Dark interface (black background, white text)
- Histogram and manual contrast sliders
- Flat-field correction (Capture / Load / Save / Clear / Apply)
- Plugin-based processing pipeline (JSON-defined)
- Pause / Resume, Save Frame (.npy or .png)
- Automatic FPS and UID display
- Optional Matplotlib toolbar for zoom and pan

## Requirements

Install Python packages:

```bash
pip install pvapy numpy matplotlib
```

Tkinter is required for the GUI (`sudo apt install python3-tk` on Linux).

## Usage

```bash
python pv_ntnda_viewer.py --pv YOUR:NTNDARRAY:PV
```

Optional arguments:

| Option | Description | Default |
|---------|--------------|----------|
| `--max-fps` | Redraw rate (0 = unthrottled) | 30 |
| `--no-toolbar` | Hide Matplotlib toolbar | off |
| `--proc-config` | Path to plugin pipeline JSON | processors.json |
| `--no-plugins` | Disable plugin processing | off |

Example:

```bash
python pv_ntnda_viewer.py --pv 32idbSP1:Pva1:Image --proc-config processors.json
```

## Flat-field correction

Flat-field normalization removes detector and illumination nonuniformity:

I_norm = (I_raw / I_flat) * mean(I_flat)

Controls:

| Button | Description |
|---------|-------------|
| Capture Flat | Capture current image as flat |
| Apply Flat | Enable or disable flat-field correction |
| Load Flat | Load `.npy` flat file |
| Save Flat | Save flat to `.npy` |
| Clear Flat | Remove current flat |

Flat-field correction is applied in real time if enabled.

## Plugin system

The viewer can apply a sequence of custom processing functions to each frame before display.
Plugins are defined as Python modules under a `processors/` directory. Each module must define a
function `process(img, meta=None, **params)` returning either `img` or `(img, meta)`.

Example processor `processors/invert.py`:

```python
import numpy as np

def process(img, meta=None):
    img_f = img.astype(np.float32, copy=False)
    lo, hi = np.nanmin(img_f), np.nanmax(img_f)
    if hi <= lo:
        return img
    out = hi - (img_f - lo)
    return out.astype(img.dtype, copy=False), meta
```

The pipeline configuration file defines the order, parameters, and enable flags for each processor.

Example `processors_invert.json`:

```json
{
  "processors_dir": "processors",
  "hot_reload": true,
  "pipeline": [
    {"name": "invert", "module": "invert", "enabled": true, "params": {}}
  ]
}
```

Running with this configuration inverts the contrast of incoming frames.

## Directory layout

```
pv_ntnda_viewer.py
procplug.py
processors.json
processors/
    normalize.py
    median.py
    invert.py
```

## Notes

- Pipelines are hot-reloaded when files change (if `hot_reload` is true).
- Processors are applied sequentially, top-to-bottom in the JSON file.
- Flat-field correction can be combined with plugins (order depends on configuration).
- Saving frames preserves the current contrast settings.

## Author

APS Imaging Group, Argonne National Laboratory
Version: 2025-10
License: Internal research use only
